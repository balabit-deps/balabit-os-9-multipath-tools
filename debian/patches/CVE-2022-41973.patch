Backport of:

From cb57b930fa690ab79b3904846634681685e3470f Mon Sep 17 00:00:00 2001
From: Martin Wilck <mwilck@suse.com>
Date: Thu, 1 Sep 2022 19:21:30 +0200
Subject: [PATCH] multipath-tools: use /run instead of /dev/shm

/dev/shm may have unsafe permissions. Use /run instead.
Use systemd's tmpfiles.d mechanism to create /run/multipath
early during boot.

For backward compatibilty, make the runtime directory configurable
via the "runtimedir" make variable.

Signed-off-by: Martin Wilck <mwilck@suse.com>
Reviewed-by: Benjamin Marzinski <bmarzins@redhat.com>
---
 .gitignore                                        |  2 ++
 Makefile.inc                                      |  3 +++
 libmultipath/defaults.h                           |  2 +-
 multipath/Makefile                                | 11 ++++++++---
 multipath/{multipath.rules => multipath.rules.in} |  4 ++--
 multipath/tmpfiles.conf.in                        |  1 +
 6 files changed, 17 insertions(+), 6 deletions(-)
 rename multipath/{multipath.rules => multipath.rules.in} (95%)
 create mode 100644 multipath/tmpfiles.conf.in

--- a/.gitignore
+++ b/.gitignore
@@ -12,6 +12,8 @@ cscope.files
 cscope.out
 kpartx/kpartx
 multipath/multipath
+multipath/multipath.rules
+multipath/tmpfiles.conf
 multipathd/multipathd
 mpathpersist/mpathpersist
 abi.tar.gz
--- a/Makefile.inc
+++ b/Makefile.inc
@@ -60,6 +60,7 @@ exec_prefix	= $(prefix)
 usr_prefix	= $(prefix)
 bindir		= $(exec_prefix)/sbin
 libudevdir	= $(prefix)/$(SYSTEMDPATH)/udev
+tmpfilesdir	= $(prefix)/$(SYSTEMDPATH)/tmpfiles.d
 udevrulesdir	= $(libudevdir)/rules.d
 multipathdir	= $(TOPDIR)/libmultipath
 man8dir		= $(prefix)/usr/share/man/man8
@@ -77,6 +78,7 @@ libdmmpdir	= $(TOPDIR)/libdmmp
 nvmedir		= $(TOPDIR)/libmultipath/nvme
 includedir	= $(prefix)/usr/include
 pkgconfdir	= $(usrlibdir)/pkgconfig
+runtimedir      := /$(RUN)
 
 GZIP		= gzip -9 -c
 RM		= rm -f
@@ -105,7 +107,8 @@ OPTFLAGS	:= -O2 -g $(STACKPROT) --param=
 WARNFLAGS	:= -Wall -Wextra -Wformat=2 $(WFORMATOVERFLOW) -Werror=implicit-int \
 		  -Werror=implicit-function-declaration -Werror=format-security \
 		  $(WNOCLOBBERED) -Werror=cast-qual $(ERROR_DISCARDED_QUALIFIERS)
-CPPFLAGS	:= $(shell dpkg-buildflags --get CPPFLAGS) -Wp,-D_FORTIFY_SOURCE=2
+CPPFLAGS	:= $(shell dpkg-buildflags --get CPPFLAGS) -Wp,-D_FORTIFY_SOURCE=2 \
+		  -DRUNTIME_DIR=\"$(runtimedir)\"
 CFLAGS		:= --std=gnu99 $(CFLAGS) $(OPTFLAGS) $(WARNFLAGS) -pipe \
 		   -DBIN_DIR=\"$(bindir)\" -DLIB_STRING=\"${LIB}\" -DRUN_DIR=\"${RUN}\" \
 		   -MMD -MP
--- a/libmultipath/defaults.h
+++ b/libmultipath/defaults.h
@@ -70,7 +70,7 @@
 #define DEFAULT_WWIDS_FILE	"/etc/multipath/wwids"
 #define DEFAULT_PRKEYS_FILE    "/etc/multipath/prkeys"
 #define DEFAULT_CONFIG_DIR	"/etc/multipath/conf.d"
-#define MULTIPATH_SHM_BASE	"/dev/shm/multipath/"
+#define MULTIPATH_SHM_BASE	RUNTIME_DIR "/multipath/"
 
 
 static inline char *set_default(char *str)
--- a/multipath/Makefile
+++ b/multipath/Makefile
@@ -12,7 +12,7 @@ EXEC = multipath
 
 OBJS = main.o
 
-all: $(EXEC)
+all: $(EXEC) multipath.rules tmpfiles.conf
 
 $(EXEC): $(OBJS) $(multipathdir)/libmultipath.so $(mpathcmddir)/libmpathcmd.so
 	$(CC) $(CFLAGS) $(OBJS) -o $(EXEC) $(LDFLAGS) $(LIBDEPS)
@@ -24,7 +24,9 @@ install:
 	$(INSTALL_PROGRAM) -m 755 $(EXEC) $(DESTDIR)$(bindir)/
 	$(INSTALL_PROGRAM) -d $(DESTDIR)$(udevrulesdir)
 	$(INSTALL_PROGRAM) -m 644 11-dm-mpath.rules $(DESTDIR)$(udevrulesdir)
-	$(INSTALL_PROGRAM) -m 644 $(EXEC).rules $(DESTDIR)$(libudevdir)/rules.d/56-multipath.rules
+	$(INSTALL_PROGRAM) -m 644 multipath.rules $(DESTDIR)$(udevrulesdir)/56-multipath.rules
+	$(INSTALL_PROGRAM) -d $(DESTDIR)$(tmpfilesdir)
+	$(INSTALL_PROGRAM) -m 644 tmpfiles.conf $(DESTDIR)$(tmpfilesdir)/multipath.conf
 	$(INSTALL_PROGRAM) -d $(DESTDIR)$(man8dir)
 	$(INSTALL_PROGRAM) -m 644 $(EXEC).8.gz $(DESTDIR)$(man8dir)
 	$(INSTALL_PROGRAM) -d $(DESTDIR)$(man5dir)
@@ -38,9 +40,12 @@ uninstall:
 	$(RM) $(DESTDIR)$(man5dir)/$(EXEC).conf.5.gz
 
 clean: dep_clean
-	$(RM) core *.o $(EXEC) *.gz
+	$(RM) core *.o $(EXEC) multipath.rules tmpfiles.conf
 
 include $(wildcard $(OBJS:.o=.d))
 
 dep_clean:
 	$(RM) $(OBJS:.o=.d)
+
+%:	%.in
+	sed 's,@RUNTIME_DIR@,$(runtimedir),' $< >$@
--- a/multipath/multipath.rules
+++ /dev/null
@@ -1,91 +0,0 @@
-# Set DM_MULTIPATH_DEVICE_PATH if the device should be handled by multipath
-SUBSYSTEM!="block", GOTO="end_mpath"
-KERNEL!="sd*|dasd*|nvme*", GOTO="end_mpath"
-ACTION=="remove", TEST=="/dev/shm/multipath/find_multipaths/$major:$minor", \
-	RUN+="/bin/rm -f /dev/shm/multipath/find_multipaths/$major:$minor"
-ACTION!="add|change", GOTO="end_mpath"
-
-IMPORT{cmdline}="nompath"
-ENV{nompath}=="?*", GOTO="end_mpath"
-IMPORT{cmdline}="multipath"
-ENV{multipath}=="off", GOTO="end_mpath"
-
-ENV{DEVTYPE}!="partition", GOTO="test_dev"
-IMPORT{parent}="DM_MULTIPATH_DEVICE_PATH"
-ENV{DM_MULTIPATH_DEVICE_PATH}=="1", ENV{ID_FS_TYPE}="none", \
-	ENV{SYSTEMD_READY}="0"
-GOTO="end_mpath"
-
-LABEL="test_dev"
-
-ENV{MPATH_SBIN_PATH}="/sbin"
-TEST!="$env{MPATH_SBIN_PATH}/multipath", ENV{MPATH_SBIN_PATH}="/usr/sbin"
-
-# FIND_MULTIPATHS_WAIT_UNTIL is the timeout (in seconds after the
-# epoch).
-IMPORT{db}="FIND_MULTIPATHS_WAIT_UNTIL"
-ENV{.SAVED_FM_WAIT_UNTIL}="$env{FIND_MULTIPATHS_WAIT_UNTIL}"
-
-# multipath -u needs to know if this device has ever been exported
-IMPORT{db}="DM_MULTIPATH_DEVICE_PATH"
-
-# multipath -u sets DM_MULTIPATH_DEVICE_PATH and,
-# if "find_multipaths smart", also FIND_MULTIPATHS_WAIT_UNTIL.
-IMPORT{program}="$env{MPATH_SBIN_PATH}/multipath -u %k"
-
-# case 1: this is definitely multipath
-ENV{DM_MULTIPATH_DEVICE_PATH}=="1", \
-	ENV{ID_FS_TYPE}="mpath_member", ENV{SYSTEMD_READY}="0", \
-	GOTO="stop_wait"
-
-# case 2: this is definitely not multipath, or timeout has expired
-ENV{DM_MULTIPATH_DEVICE_PATH}!="2", \
-	GOTO="stop_wait"
-
-# Code below here is only run in "smart" mode.
-# multipath -u has indicated this is "maybe" multipath.
-
-# Note that DM_MULTIPATH_DEVICE_PATH has the value 2 at this point.
-# This value will never propagate to other rules files, because
-# it will be reset to 1 in the "pretend_multipath" section below.
-
-# This shouldn't happen, just in case.
-ENV{FIND_MULTIPATHS_WAIT_UNTIL}!="?*", GOTO="end_mpath"
-
-# Be careful not to start the timer twice.
-ACTION!="add", GOTO="pretend_mpath"
-ENV{.SAVED_FM_WAIT_UNTIL}=="?*", GOTO="pretend_mpath"
-
-# At this point, we are seeing this path for the first time, and it's "maybe" multipath.
-
-# The actual start command for the timer.
-#
-# The purpose of this command is only to make sure we will receive another
-# uevent eventually. *Any* uevent may cause waiting to finish if it either ends
-# in case 1-3 above, or if it arrives after FIND_MULTIPATHS_WAIT_UNTIL.
-#
-# Note that this will try to activate multipathd if it isn't running yet.
-# If that fails, the unit starts and expires nonetheless. If multipathd
-# startup needs to wait for other services, this wait time will add up with
-# the --on-active timeout.
-#
-# We must trigger an "add" event because LVM2 will only act on those.
-
-RUN+="/usr/bin/systemd-run --unit=cancel-multipath-wait-$kernel --description 'cancel waiting for multipath siblings of $kernel' --no-block --timer-property DefaultDependencies=no --timer-property Conflicts=shutdown.target --timer-property Before=shutdown.target --timer-property AccuracySec=500ms --property DefaultDependencies=no --property Conflicts=shutdown.target --property Before=shutdown.target --property Wants=multipathd.service --property After=multipathd.service --on-active=$env{FIND_MULTIPATHS_WAIT_UNTIL} /bin/udevadm trigger --action=add $sys$devpath"
-
-LABEL="pretend_mpath"
-ENV{DM_MULTIPATH_DEVICE_PATH}="1"
-ENV{SYSTEMD_READY}="0"
-GOTO="end_mpath"
-
-LABEL="stop_wait"
-# If timeout hasn't expired but we're not in "maybe" state any more, stop timer
-# Do this only once, and only if the timer has been started before
-IMPORT{db}="FIND_MULTIPATHS_WAIT_CANCELLED"
-ENV{FIND_MULTIPATHS_WAIT_CANCELLED}!="?*", \
-	ENV{FIND_MULTIPATHS_WAIT_UNTIL}=="?*", \
-	ENV{FIND_MULTIPATHS_WAIT_UNTIL}!="0", \
-	ENV{FIND_MULTIPATHS_WAIT_CANCELLED}="1", \
-	RUN+="/bin/systemctl stop cancel-multipath-wait-$kernel.timer"
-
-LABEL="end_mpath"
--- /dev/null
+++ b/multipath/multipath.rules.in
@@ -0,0 +1,91 @@
+# Set DM_MULTIPATH_DEVICE_PATH if the device should be handled by multipath
+SUBSYSTEM!="block", GOTO="end_mpath"
+KERNEL!="sd*|dasd*|nvme*", GOTO="end_mpath"
+ACTION=="remove", TEST=="@RUNTIME_DIR@/multipath/find_multipaths/$major:$minor", \
+	RUN+="/usr/bin/rm -f @RUNTIME_DIR@/multipath/find_multipaths/$major:$minor"
+ACTION!="add|change", GOTO="end_mpath"
+
+IMPORT{cmdline}="nompath"
+ENV{nompath}=="?*", GOTO="end_mpath"
+IMPORT{cmdline}="multipath"
+ENV{multipath}=="off", GOTO="end_mpath"
+
+ENV{DEVTYPE}!="partition", GOTO="test_dev"
+IMPORT{parent}="DM_MULTIPATH_DEVICE_PATH"
+ENV{DM_MULTIPATH_DEVICE_PATH}=="1", ENV{ID_FS_TYPE}="none", \
+	ENV{SYSTEMD_READY}="0"
+GOTO="end_mpath"
+
+LABEL="test_dev"
+
+ENV{MPATH_SBIN_PATH}="/sbin"
+TEST!="$env{MPATH_SBIN_PATH}/multipath", ENV{MPATH_SBIN_PATH}="/usr/sbin"
+
+# FIND_MULTIPATHS_WAIT_UNTIL is the timeout (in seconds after the
+# epoch).
+IMPORT{db}="FIND_MULTIPATHS_WAIT_UNTIL"
+ENV{.SAVED_FM_WAIT_UNTIL}="$env{FIND_MULTIPATHS_WAIT_UNTIL}"
+
+# multipath -u needs to know if this device has ever been exported
+IMPORT{db}="DM_MULTIPATH_DEVICE_PATH"
+
+# multipath -u sets DM_MULTIPATH_DEVICE_PATH and,
+# if "find_multipaths smart", also FIND_MULTIPATHS_WAIT_UNTIL.
+IMPORT{program}="$env{MPATH_SBIN_PATH}/multipath -u %k"
+
+# case 1: this is definitely multipath
+ENV{DM_MULTIPATH_DEVICE_PATH}=="1", \
+	ENV{ID_FS_TYPE}="mpath_member", ENV{SYSTEMD_READY}="0", \
+	GOTO="stop_wait"
+
+# case 2: this is definitely not multipath, or timeout has expired
+ENV{DM_MULTIPATH_DEVICE_PATH}!="2", \
+	GOTO="stop_wait"
+
+# Code below here is only run in "smart" mode.
+# multipath -u has indicated this is "maybe" multipath.
+
+# Note that DM_MULTIPATH_DEVICE_PATH has the value 2 at this point.
+# This value will never propagate to other rules files, because
+# it will be reset to 1 in the "pretend_multipath" section below.
+
+# This shouldn't happen, just in case.
+ENV{FIND_MULTIPATHS_WAIT_UNTIL}!="?*", GOTO="end_mpath"
+
+# Be careful not to start the timer twice.
+ACTION!="add", GOTO="pretend_mpath"
+ENV{.SAVED_FM_WAIT_UNTIL}=="?*", GOTO="pretend_mpath"
+
+# At this point, we are seeing this path for the first time, and it's "maybe" multipath.
+
+# The actual start command for the timer.
+#
+# The purpose of this command is only to make sure we will receive another
+# uevent eventually. *Any* uevent may cause waiting to finish if it either ends
+# in case 1-3 above, or if it arrives after FIND_MULTIPATHS_WAIT_UNTIL.
+#
+# Note that this will try to activate multipathd if it isn't running yet.
+# If that fails, the unit starts and expires nonetheless. If multipathd
+# startup needs to wait for other services, this wait time will add up with
+# the --on-active timeout.
+#
+# We must trigger an "add" event because LVM2 will only act on those.
+
+RUN+="/usr/bin/systemd-run --unit=cancel-multipath-wait-$kernel --description 'cancel waiting for multipath siblings of $kernel' --no-block --timer-property DefaultDependencies=no --timer-property Conflicts=shutdown.target --timer-property Before=shutdown.target --timer-property AccuracySec=500ms --property DefaultDependencies=no --property Conflicts=shutdown.target --property Before=shutdown.target --property Wants=multipathd.service --property After=multipathd.service --on-active=$env{FIND_MULTIPATHS_WAIT_UNTIL} /bin/udevadm trigger --action=add $sys$devpath"
+
+LABEL="pretend_mpath"
+ENV{DM_MULTIPATH_DEVICE_PATH}="1"
+ENV{SYSTEMD_READY}="0"
+GOTO="end_mpath"
+
+LABEL="stop_wait"
+# If timeout hasn't expired but we're not in "maybe" state any more, stop timer
+# Do this only once, and only if the timer has been started before
+IMPORT{db}="FIND_MULTIPATHS_WAIT_CANCELLED"
+ENV{FIND_MULTIPATHS_WAIT_CANCELLED}!="?*", \
+	ENV{FIND_MULTIPATHS_WAIT_UNTIL}=="?*", \
+	ENV{FIND_MULTIPATHS_WAIT_UNTIL}!="0", \
+	ENV{FIND_MULTIPATHS_WAIT_CANCELLED}="1", \
+	RUN+="/bin/systemctl stop cancel-multipath-wait-$kernel.timer"
+
+LABEL="end_mpath"
--- /dev/null
+++ b/multipath/tmpfiles.conf.in
@@ -0,0 +1 @@
+d @RUNTIME_DIR@/multipath 0700 root root -
